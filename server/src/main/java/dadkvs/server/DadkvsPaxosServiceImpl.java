package dadkvs.server;


import java.util.ArrayList;
import java.util.Iterator;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsPaxos;
import dadkvs.DadkvsPaxosServiceGrpc;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

public class DadkvsPaxosServiceImpl extends DadkvsPaxosServiceGrpc.DadkvsPaxosServiceImplBase {


    DadkvsServerState server_state;
    
    
    public DadkvsPaxosServiceImpl(DadkvsServerState state) {
	this.server_state = state;
	
    }
    

    @Override
    public void phaseone(DadkvsPaxos.PhaseOneRequest request, StreamObserver<DadkvsPaxos.PhaseOneReply> responseObserver) {
    boolean accepted = true;
	// for debug purposes
	System.out.println("Receive phase1 request: " + request.getPhase1Index());
    if(server_state.highest_leader > request.getPhase1Timestamp()){
        accepted = false;
    }else {
        server_state.highest_leader = request.getPhase1Timestamp();
    }    
    System.out.println("Received phase one request for index : " + request.getPhase1Index() + " with timestamp: " + request.getPhase1Timestamp());
    // TODO 
    int accepted_value = -1;
    if(server_state.agreed_indexes.containsKey(request.getPhase1Index())){
        accepted_value = server_state.agreed_indexes.get(request.getPhase1Index()).getPhase2Value();
    }
    //if(server_state.timestamp > request.getPhase1Timestamp()){
    DadkvsPaxos.PhaseOneReply.Builder phase_one_reply = DadkvsPaxos.PhaseOneReply.newBuilder();
			phase_one_reply.setPhase1Config(request.getPhase1Config())
					.setPhase1Index(request.getPhase1Index())
					.setPhase1Timestamp(server_state.highest_leader)
                    .setPhase1Accepted(accepted)
                    .setPhase1Value(accepted_value)
                    .build();
    responseObserver.onNext(phase_one_reply.build());
    responseObserver.onCompleted();
    }

    @Override
    public void phasetwo(DadkvsPaxos.PhaseTwoRequest request, StreamObserver<DadkvsPaxos.PhaseTwoReply> responseObserver) {
        // for debug purposes
        System.out.println ("Receive phase two request: " + request);
        boolean accepted = true;
        if(server_state.highest_leader > request.getPhase2Timestamp()){
            accepted = false;
            // if(server_state.agreed_indexes.containsKey(request.getPhase2Index()) && server_state.agreed_indexes.get(request.getPhase2Index()).getPhase2Timestamp() < request.getPhase2Timestamp()){
            //     server_state.agreed_indexes.put(request.getPhase2Index(),request); // trocar pelo mais atualizado????
            // }
        }

        System.out.println("Received phase two request for index : " + request.getPhase2Index() + " with timestamp: " + request.getPhase2Timestamp());

        DadkvsPaxos.PhaseTwoReply.Builder phase_two_reply = DadkvsPaxos.PhaseTwoReply.newBuilder();
        phase_two_reply.setPhase2Config(request.getPhase2Config())
                .setPhase2Index(request.getPhase2Index())
                .setPhase2Accepted(accepted)
                .build();
        responseObserver.onNext(phase_two_reply.build());
        responseObserver.onCompleted();
        if(accepted){
            // se ja recebemos o request a principio vindo do learn
                System.out.println("Sending learn requests---------------------------------------------");
                server_state.highest_leader = request.getPhase2Timestamp();
                server_state.agreed_indexes.put(request.getPhase2Index(),request); //marcar como guardado
                DadkvsMainServiceImpl.send_learn_requests(request);
        }
    }

    @Override
    public void learn(DadkvsPaxos.LearnRequest request, StreamObserver<DadkvsPaxos.LearnReply> responseObserver) {
	// for debug purposes
	System.out.println("Receive learn request: " + request);
    boolean accepted = true;

    System.out.println("Received learn request for index : " + request.getLearnindex() + " with timestamp: " + request.getLearntimestamp());
    System.out.println("serverstate.learncounter: " + server_state.learn_counter.getOrDefault(request.getLearnindex(), 0));
    if(request.getLearntimestamp() < server_state.highest_leader){
        accepted = false;
        server_state.learn_counter.put(request.getLearntimestamp(),-5);   
    }
    else if(request.getLearntimestamp() > server_state.highest_leader){
        server_state.highest_leader = request.getLearntimestamp();
        server_state.learn_counter.put(request.getLearntimestamp(),server_state.learn_counter.getOrDefault(request.getLearntimestamp(), 0) + 1);   
        // we need to wait for the phase 2 to commit the value
    }

    // server_state.ordered_learn_requests.put(request.getLearnindex(), request);
    // quando recebe um request com uma timestamp incrementa esta lista
    if(server_state.learn_counter.getOrDefault(request.getLearntimestamp(),0) >= 3){
        System.out.println("Received quorum if learning requests---------------------------------------------");
        DadkvsMainServiceImpl.executeCommits(server_state);
        this.server_state.next_req++;
        if(server_state.i_am_leader){
            synchronized (this) {
                this.server_state.locked = false; // destranca o consensus e notifica os outros threads
                notifyAll();
            }
        }
    }
    DadkvsPaxos.LearnReply.Builder learn_reply = DadkvsPaxos.LearnReply.newBuilder();
    learn_reply.setLearnconfig(request.getLearnconfig())
            .setLearnindex(request.getLearnindex())
            .setLearnaccepted(accepted)
            .build();
    //DadkvsMainServiceImpl.executeCommits(server_state);
    responseObserver.onNext(learn_reply.build());
    responseObserver.onCompleted();

  

    }

    

}
