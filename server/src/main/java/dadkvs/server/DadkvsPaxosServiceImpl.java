
package dadkvs.server;


import java.util.ArrayList;
import java.util.Iterator;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsPaxos;
import dadkvs.DadkvsPaxosServiceGrpc;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;
public class DadkvsPaxosServiceImpl extends DadkvsPaxosServiceGrpc.DadkvsPaxosServiceImplBase {


    DadkvsServerState server_state;
    
    public DadkvsPaxosServiceImpl(DadkvsServerState state) {
	this.server_state = state;
        int config = 0;   // config is 0 for now, when we add it we can change it
	
    }
    

    @Override
    public void phaseone(DadkvsPaxos.PhaseOneRequest request, StreamObserver<DadkvsPaxos.PhaseOneReply> responseObserver) {
	// for debug purposes
	System.out.println("Receive phase1 request: " + request);

    }

    @Override
    public void phasetwo(DadkvsPaxos.PhaseTwoRequest p2request, StreamObserver<DadkvsPaxos.PhaseTwoReply> responseObserver) {
        // for debug purposes
        System.out.println ("Receive phase two request: " + p2request);
        // get reqid from the phase 2 request sent by the leader
        int reqid = p2request.getPhase2Index();
        if(server_state.request_list.containsKey(reqid)){
            blablac(reqid);
        }
        this.server_state.phase2Observer.put(reqid,responseObserver);
        this.server_state.phase_two_requests.put(reqid,p2request);

        // build phase 2 reply message
        DadkvsPaxos.PhaseTwoReply phase_two_reply = DadkvsPaxos.PhaseTwoReply.newBuilder()
                .setPhase2Config(0)     // config is 0
                .setPhase2Index(reqid)
                .setPhase2Accepted(true).build();

        // send phase two reply
        responseObserver.onNext(phase_two_reply);
        responseObserver.onCompleted();
    }

    @Override
    public void learn(DadkvsPaxos.LearnRequest request, StreamObserver<DadkvsPaxos.LearnReply> responseObserver) {
	// for debug purposes
	System.out.println("Receive learn request: " + request);
    }

    public void blablac(int reqid){


        // TODO: add next seq number check
        // TODO: while(next_seq_num == req_seq_num)

        // get the request we already magicly have(to be fixed)...   This may be null
        DadkvsMain.CommitRequest request = server_state.request_list.get(reqid);
        DadkvsPaxos.PhaseTwoRequest p2request = server_state.phase_two_requests.get(reqid);
        int key1 = request.getKey1();
        int version1 = request.getVersion1();
        int key2 = request.getKey2();
        int version2 = request.getVersion2();
        int writekey = request.getWritekey();
        int writeval = request.getWriteval();

        // for debug purposes
        System.out.println("reqid " + reqid + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2 + " wk " + writekey + " writeval " + writeval);

        // append pedido a lista
        // this.timestamp++;  so interessa para o ldier
        TransactionRecord txrecord = new TransactionRecord (key1, version1, key2, version2, writekey, writeval, p2request.getPhase2Timestamp());
        boolean result = this.server_state.store.commit (txrecord);

        // TODO:
        // for debug purposes
        System.out.println("Result is ready for request with reqid " + reqid);


        // create commit message to send to client
        DadkvsMain.CommitReply response =DadkvsMain.CommitReply.newBuilder()
                .setReqid(reqid).setAck(result).build();
        // send commit reply to client
        server_state.responseObserver.get(reqid).onNext(response);
        server_state.responseObserver.get(reqid).onCompleted();
    }

}

