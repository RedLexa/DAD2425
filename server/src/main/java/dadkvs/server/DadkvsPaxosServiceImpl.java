
package dadkvs.server;


import java.util.ArrayList;
import java.util.Iterator;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsPaxos;
import dadkvs.DadkvsPaxosServiceGrpc;
import dadkvs.DadkvsConsoleServiceImpl;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;


public class DadkvsPaxosServiceImpl extends DadkvsPaxosServiceGrpc.DadkvsPaxosServiceImplBase {


    DadkvsServerState server_state;
    
    
    public DadkvsPaxosServiceImpl(DadkvsServerState state) {
	this.server_state = state;
	
    }
    

    @Override
    public void phaseone(DadkvsPaxos.PhaseOneRequest request, StreamObserver<DadkvsPaxos.PhaseOneReply> responseObserver) {
	// for debug purposes
	System.out.println("Receive phase1 request: " + request);
    if(!server_state.i_am_leader){
        //verificar se timestamp recebido e maior doq aquele q ja tenho
        boolean accepted = true;
        int proposed = -1;
        int accepted_value;
        if(server_state.timestamp > request.getTimestamp()){
            accepted = false;
            accepted_value = getAgreedIndexOrDefault(request.getIndex());
            //responder recusando
        }else if(accepted_value != -1){        //verificar se ja tenho algum valor aceite previamente para este index (request.getIndex)
            //colocar esse valor na resposta
            //aceder a mapa de valores previamente aceites (old value)
            proposed = accepted_value;
        }
        DadkvsPaxos.PhaseOneReply.Builder phase_one_reply = DadkvsPaxos.PhaseOneReply.newBuilder();
				phase_one_reply.setPhase1Config(request.getConfig())
						.setPhase1Index(request.getIndex())
						.setPhase1Timestamp(server_state.timestamp)
                        .setAccepted(accepted).
                        setValue(proposed)
                        .build();
        responseObserver.onNext();
        responseObserver.onCompleted();
        //enviar resposta
    }

    }

    @Override
    public void phasetwo(DadkvsPaxos.PhaseTwoRequest request, StreamObserver<DadkvsPaxos.PhaseTwoReply> responseObserver) {
	// for debug purposes
	System.out.println ("Receive phase two request: " + request);

    }

    @Override
    public void learn(DadkvsPaxos.LearnRequest request, StreamObserver<DadkvsPaxos.LearnReply> responseObserver) {
	// for debug purposes
	System.out.println("Receive learn request: " + request);

    }

}
