package dadkvs.server;


import java.util.ArrayList;
import java.util.Iterator;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsPaxos;
import dadkvs.DadkvsPaxosServiceGrpc;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

public class DadkvsPaxosServiceImpl extends DadkvsPaxosServiceGrpc.DadkvsPaxosServiceImplBase {


    DadkvsServerState server_state;
    
    
    public DadkvsPaxosServiceImpl(DadkvsServerState state) {
	this.server_state = state;
	
    }
    

    @Override
    public void phaseone(DadkvsPaxos.PhaseOneRequest request, StreamObserver<DadkvsPaxos.PhaseOneReply> responseObserver) {
    boolean accepted = true;
	// for debug purposes
	System.out.println("Receive phase1 request: " + request.getPhase1Index());
    if(server_state.highest_leader > request.getPhase1Timestamp()){
        accepted = false;
        if()
    }
    server_state.highest_leader = Math.max(server_state.highest_leader,request.getPhase1Config());
    
    System.out.println("Received phase one request for index : " + request.getPhase1Index() + " with timestamp: " + request.getPhase1Timestamp());
    // TODO SOMETHING
    int accepted_value = server_state.agreed_indexes.getOrDefault(request.getPhase1Index(), -1);
    //if(server_state.timestamp > request.getPhase1Timestamp()){
    if(server_state.agreed_indexes.getOrDefault(request.getPhase2Index(),-1) > request.getPhase1Timestamp()){ 
        accepted = false;
        //responder recusando
        System.out.println("Will refuse the request");
    }else{
        server_state.timestamp = request.getPhase1Timestamp();
    }
    DadkvsPaxos.PhaseOneReply.Builder phase_one_reply = DadkvsPaxos.PhaseOneReply.newBuilder();
			phase_one_reply.setPhase1Config(request.getPhase1Config())
					.setPhase1Index(request.getPhase1Index())
					.setPhase1Timestamp(server_state.timestamp)
                    .setPhase1Accepted(accepted)
                    .setPhase1Value(accepted_value)
                    .build();
    responseObserver.onNext(phase_one_reply.build());
    responseObserver.onCompleted();
    }

    @Override
    public void phasetwo(DadkvsPaxos.PhaseTwoRequest request, StreamObserver<DadkvsPaxos.PhaseTwoReply> responseObserver) {
        // for debug purposes
        System.out.println ("Receive phase two request: " + request);
        boolean accepted = true;
        System.out.println("Received phase two request for index : " + request.getPhase2Index() + " with timestamp: " + request.getPhase2Timestamp());
        if(server_state.timestamp > request.getPhase2Timestamp()){
            accepted = false;
        }else{
            // TODO: check timestamp
            // TODO: change to request
            server_state.agreed_indexes.put(request.getPhase2Index(),request.getPhase2Value()); //marcar como guardado
        }
        DadkvsPaxos.PhaseTwoReply.Builder phase_two_reply = DadkvsPaxos.PhaseTwoReply.newBuilder();
        phase_two_reply.setPhase2Config(request.getPhase2Config())
                .setPhase2Index(request.getPhase2Index())
                .setPhase2Accepted(accepted)
                .build();
    responseObserver.onNext(phase_two_reply.build());
    responseObserver.onCompleted();
    }

    @Override
    public void learn(DadkvsPaxos.LearnRequest request, StreamObserver<DadkvsPaxos.LearnReply> responseObserver) {
	// for debug purposes
	System.out.println("Receive learn request: " + request);
    boolean accepted = true;
    if(request.getLearntimestamp() < server_state.timestamp){
        accepted = false;
    }
    server_state.ordered_learn_requests.put(request.getLearnindex(), request);

    DadkvsPaxos.LearnReply.Builder learn_reply = DadkvsPaxos.LearnReply.newBuilder();
    learn_reply.setLearnconfig(request.getLearnconfig())
            .setLearnindex(request.getLearnindex())
            .setLearnaccepted(accepted)
            .build();

    //responseObserver.onNext(learn_reply.build());
    //responseObserver.onCompleted();
    DadkvsMainServiceImpl.executeCommits(server_state);
    responseObserver.onNext(learn_reply.build());
    responseObserver.onCompleted();

    }

    

}
