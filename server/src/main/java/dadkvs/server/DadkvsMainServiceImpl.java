package dadkvs.server;

import java.util.ArrayList;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.DadkvsPaxos;
import dadkvs.DadkvsPaxosServiceGrpc;
import dadkvs.util.CollectorStreamObserver;
import dadkvs.util.GenericResponseCollector;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;


public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

	DadkvsServerState server_state;
	Paxos paxos;
	boolean stubs_created;
	int n_servers = 5;

	public DadkvsMainServiceImpl(DadkvsServerState state) {
		this.server_state = state;
		paxos = new Paxos(server_state);
	}

	@Override
	public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
		// for debug purposes
		System.out.println("Receiving read request:" + request);

		int reqid = request.getReqid();
		int key = request.getKey();
		VersionedValue vv = this.server_state.store.read(key);

		DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
				.setReqid(reqid).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

		responseObserver.onNext(response);
		responseObserver.onCompleted();
	}


	@Override
	public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
		server_state.responseObserver.put(request.getReqid(), responseObserver);
		server_state.request_list.put(request.getReqid(), request);
		System.out.println("###################################&&&&&&&&&&&&&&&&&&&&&&&");
		if(!server_state.i_am_leader){
			DadkvsMainServiceImpl.executeCommits(server_state);
		}

		synchronized (server_state) {
			this.server_state.notifyAll();
		}
	}

	public static void executeCommits(DadkvsServerState server_state) {
		// for debug purposes
		System.out.println("Executing all commits");
		// tem que existir um pedido do cliente, um pedido phase 2 e uma maioria de
		// learns da timestamp
		System.out.println("reqid " + server_state.next_req);
		if(server_state.agreed_indexes.containsKey(server_state.next_req)){
			System.out.println("server_state.agreed_indexes.get(server_state.next_req) != null "
					+ server_state.agreed_indexes.get(server_state.next_req) != null);
		}
					
		synchronized (server_state.next_req_lock) {
			while (server_state.agreed_indexes.containsKey(server_state.next_req) &&
				server_state.agreed_indexes.get(server_state.next_req) != null &&
				server_state.learn_counter.getOrDefault(
						server_state.agreed_indexes.get(server_state.next_req).getPhase2Timestamp(), 0) >= 3
				&&
				server_state.request_list
						.containsKey(server_state.agreed_indexes.get(server_state.next_req).getPhase2Value())) {
				int aux_req_id = server_state.agreed_indexes.get(server_state.next_req).getPhase2Value();

				if(server_state.request_list.containsKey(aux_req_id)){
					// executa commit
					System.out.println("Executing commit with reqid " + server_state.next_req
							+ "###########################################");
					executeCommit(server_state.agreed_indexes.get(server_state.next_req).getPhase2Value(), server_state);
					server_state.ordered_executed_requests.put(server_state.next_req.intValue(), server_state.request_list.get(aux_req_id));
					server_state.request_list.remove(aux_req_id);
					server_state.next_req++;    // so acrescentamos ao next req se executarmos o commit
				}
				
				// se nao executamos commit mas chegamos aqui e porque o pedido do cliente e repetido
                server_state.restart = false;
				server_state.locked = false;
                server_state.next_req_lock.notifyAll();  // avisa que recebemos um pedido de learn server_state.next_req.wait
			}
		}
	}

	public static void executeCommit(int reqid, DadkvsServerState server_state) {
		int n_servers = 5;

		System.out.println("executing transaction with reqid " + reqid);
		System.out.println("next_req is " + server_state.next_req);
		// enquanto o reqid for o do proximo pedido e se tivermos o pedido do cliente
		// e do 2phase vamos processar a transacao

		DadkvsMain.CommitRequest request = server_state.request_list.get(reqid);
		int key1 = request.getKey1();
		int version1 = request.getVersion1();
		int key2 = request.getKey2();
		int version2 = request.getVersion2();
		int writekey = request.getWritekey();
		int writeval = request.getWriteval();

		// for debug purposes
		System.out.println("reqid " + reqid + " key1 " + key1 + " v1 " + version1 + "k2"
				+ key2 + " v2 " + version2 + " wk " + writekey + " writeval " +
				writeval);

		// append pedido a lista
		TransactionRecord txrecord = new TransactionRecord(key1, version1, key2,
				version2, writekey, writeval, server_state.timestamp);
		boolean result = server_state.store.commit(txrecord);

		// for debug purposes
		System.out.println("Result is ready for request with reqid " + reqid);

		// create commit message to send to client
		DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
				.setReqid(reqid).setAck(result).build();
		// send commit reply to client
		server_state.responseObserver.get(reqid).onNext(response);
		server_state.responseObserver.get(reqid).onCompleted();
		System.out.println("responded to client############");
	}
}
