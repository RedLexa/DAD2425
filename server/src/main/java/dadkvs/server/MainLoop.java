package dadkvs.server;

import java.util.ArrayList;
import java.util.Iterator;

/* these imported classes are generated by the hello-world-server contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsPaxos;
import dadkvs.DadkvsPaxosServiceGrpc;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;


public class MainLoop implements Runnable  {
    DadkvsServerState server_state;
    
    
    public MainLoop(DadkvsServerState state) {
	this.server_state = state;
    }

    public void run() {
	while (true) 
	    this.doWork();
    }
   
    
    
    synchronized public void doWork() {
	System.out.println("Main loop do work start");

	synchronized (this.server_state) {
		while (!this.has_work()) {
			System.out.println("Main loop do work: waiting");
			try {
			this.server_state.wait ();
			}
			catch (InterruptedException e) {
			}
		}
	
		// do consensus
		DadkvsMainServiceImpl.do_consensus(this.server_state);
		System.out.println("Main loop do work finish");
	}
    }
    
    synchronized public void wakeup() {
	notify();    
    }

	public boolean get_lock() {
		if (this.server_state.locked) {
			return false;
		}
		this.server_state.locked = true;
		return true;
	}

	public boolean has_work(){
		if (this.server_state.i_am_leader) {
			// only one commit at a time for the leader
			if(this.get_lock() == false || this.server_state.request_list.isEmpty()){
				return false;
			}
			this.server_state.locked = true;
			return true;
			
		}
		return false;
	}
}
